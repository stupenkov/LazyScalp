// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Author: Anton Stupenkov
// Email: stupean@gmail.com
// Screener: https://t.me/LazyScalp
// © stupean

//@version=5
indicator("Scalping level [Lite] 1.0.1", overlay = true, max_lines_count = 500)
import stupean/HLevel/1 as HLevel

//#region INPUTS ============================================
// Local level
int localLevelPeriodSeconds = input.int(defval = 60, title = "Period, min", group = "local level") * 60
int localLevelLifetimeSeconds = input.int(defval = 72, title = "Lifetime, hour", group = "local level", tooltip = "0 - infinity") * 3600
color localLevelColor = input.color(defval = #3179f5, title = "Color", inline = "localStyle", group = "local level")
int localLevelWidth = input.int(defval = 1, title = "Width", minval = 1, maxval = 10, step = 1, inline = "localStyle", group = "local level")

// Middle level
int middleLevelPeriodSeconds = input.int(defval = 240, title = "Period, min", group = "middle level") * 60
int middleLevelLifetimeSeconds = input.int(defval = 240, title = "Lifetime, hour", group = "middle level", tooltip = "0 - infinity") * 3600
color middleLevelColor = input.color(defval = color.lime, title = "Color", inline = "middleStyle", group = "middle level")
int middleLevelWidth = input.int(defval = 1, title = "Width", minval = 1, maxval = 10, step = 1, inline = "middleStyle", group = "middle level")

// Global level
int globalLevelPeriodSeconds = input.int(defval = 1440, title = "Period, min", group = "global level") * 60
int globalLevelLifetimeSeconds = input.int(defval = 0, title = "Lifetime, hour", group = "global level", tooltip = "0 - infinity") * 3600
color globalLevelColor = input.color(defval = color.red, title = "Color", inline = "globalStyle", group = "global level")
int globalLevelWidth = input.int(defval = 1, title = "Width", minval = 1, maxval = 10, step = 1, inline = "globalStyle", group = "global level")

// Break level
int breakLevelLifetimeSeconds = input.int(defval = 180, title = "Lifetime, min", group = "break level") * 60
color breakLevelColor = input.color(defval = color.new(color.gray, 70), title = "Color",  inline = "breakStyle", group = "break level")
int breakLevelWidth = input.int(defval = 1, title = "Width", minval =  1, maxval =  10, step =  1, inline="breakStyle", group = "break level")

// Common
float maxLevelDistanceCoef = input.float(defval = 10, title = "Max distance to level", group = "common")
string priceShowOptions = input.string(defval = size.normal, options = [size.huge, size.normal, size.small, size.tiny, "none"], title = "Price text on chart", group = "common")
bool showLabel = input.bool(defval = true, title = "Show label")

//#endregion

//#region CONSTANTS ============================================
string SIDE_HIGH = "SIDE_HIGH"
string SIDE_LOW = "SIDE_LOW"
int LOCAL_PERIOD = 0
int MIDDLE_PERIOD = 1
int GLOBAL_PERIOD = 2
int BREAK_PERIOD = 3
//#endregion

//#region GLOBAL VARIABLES ============================================
int secondsInCurrentPeriod = timeframe.in_seconds(timeframe.period)
int localLevelLifetimeBars = math.floor(localLevelLifetimeSeconds / secondsInCurrentPeriod)
int middleLevelLifetimeBars = math.floor(middleLevelLifetimeSeconds / secondsInCurrentPeriod)
int globalLevelLifetimeBars = math.floor(globalLevelLifetimeSeconds / secondsInCurrentPeriod)
int breakLevelLifetimeBars = math.floor(breakLevelLifetimeSeconds / secondsInCurrentPeriod)
float priceRangeAtr = request.security(syminfo.ticker, "60", ta.atr(24))
float priceRange = priceRangeAtr * maxLevelDistanceCoef
var HLevel.levelsClass levels = HLevel.levelsClass.new()
var HLevel.levelDrawerClass drawer = HLevel.levelDrawerClass.new()
var bool isInit = false
//#endregion

//#region INITIALIZATION =================================================================
if not isInit
    levels.init()
    levels.addLifetime(LOCAL_PERIOD, localLevelLifetimeBars)
    levels.addLifetime(MIDDLE_PERIOD, middleLevelLifetimeBars)
    levels.addLifetime(GLOBAL_PERIOD, globalLevelLifetimeBars)
    levels.addLifetime(BREAK_PERIOD, breakLevelLifetimeBars)

    drawer.init(priceShowOptions)
    drawer.addStyle(HLevel.lineStyle.new(localLevelWidth, localLevelColor))
    drawer.addStyle(HLevel.lineStyle.new(middleLevelWidth, middleLevelColor))
    drawer.addStyle(HLevel.lineStyle.new(globalLevelWidth, globalLevelColor))
    drawer.addStyle(HLevel.lineStyle.new(breakLevelWidth, breakLevelColor))
    isInit := true
//#endregion

//#region MAIN LOOP =================================================================
HLevel.pivotsList pivots = HLevel.pivotsList.new()
pivots.init(secondsInCurrentPeriod)
pivots.add(LOCAL_PERIOD, localLevelPeriodSeconds)
pivots.add(MIDDLE_PERIOD, middleLevelPeriodSeconds)
pivots.add(GLOBAL_PERIOD, globalLevelPeriodSeconds)

levels.update(pivots, priceRange)
drawer.draw(levels.getAll())
//#endregion

//#region DISLPLAY INFORMATION ============================================
var table panel = table.new(
  position = position.bottom_left,
  columns = 1,
  rows = 5)

if showLabel and barstate.islast
    table.cell(table_id = panel, column = 0, row = 0, text = "TOP CRYPTO SCREENER: https://t.me/LazyScalp", bgcolor = color.rgb(152, 154, 161), text_color = color.black)
    table.cell(table_id = panel, column = 0, row = 3, text = " ")
//#endregion