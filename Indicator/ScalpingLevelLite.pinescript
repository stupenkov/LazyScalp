// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Author: Anton Stupenkov
// Email: stupean@gmail.com
// Screener: https://t.me/LazyScalp
// © stupean

//@version=5
indicator("Scalping level [Lite] 1.3.0", overlay = true, max_lines_count = 500)
import stupean/HLevel/48 as HLevel

//#region INPUTS ============================================
// Local level
int localLevelPeriodLegSeconds = input.int(defval = 60, title = "Period, min", group = "local level") * 60 / 2
int localLevelLifetimeSeconds = input.int(defval = 72, title = "Lifetime, hour", group = "local level", tooltip = "0 - infinity") * 3600
color localLevelColor = input.color(defval = color.blue, title = "Color", inline = "localStyle", group = "local level")
int localLevelWidth = input.int(defval = 1, title = "Width", minval = 1, maxval = 10, step = 1, inline = "localStyle", group = "local level")

// Middle level
int middleLevelPeriodLegSeconds = input.int(defval = 480, title = "Period, min", group = "middle level") * 60 / 2
int middleLevelLifetimeSeconds = input.int(defval = 240, title = "Lifetime, hour", group = "middle level", tooltip = "0 - infinity") * 3600
color middleLevelColor = input.color(defval = color.blue, title = "Color", inline = "middleStyle", group = "middle level")
int middleLevelWidth = input.int(defval = 2, title = "Width", minval = 1, maxval = 10, step = 1, inline = "middleStyle", group = "middle level")

// Global level
int globalLevelPeriodLegSeconds = input.int(defval = 2880, title = "Period, min", group = "global level") * 60 / 2
int globalLevelLifetimeSeconds = input.int(defval = 0, title = "Lifetime, hour", group = "global level", tooltip = "0 - infinity") * 3600
color globalLevelColor = input.color(defval = color.blue, title = "Color", inline = "globalStyle", group = "global level")
int globalLevelWidth = input.int(defval = 3, title = "Width", minval = 1, maxval = 10, step = 1, inline = "globalStyle", group = "global level")

// Break level
int breakLevelLifetimeSeconds = input.int(defval = 180, title = "Lifetime, min", group = "break levels") * 60
color breakLevelColor = input.color(defval = color.new(color.gray, 70), title = "Color",  inline = "breakStyle", group = "break levels")
int breakLevelWidth = input.int(defval = 1, title = "Width", minval =  1, maxval =  10, step =  1, inline="breakStyle", group = "break levels")

// Important levels
float nearLevelCoef = input.float(defval = 0.1, title = "Near levels coefficient", group = "important levels")
int minNearLevels = input.int(defval = 2, minval = 1, title = "Minimun near levels", group = "important levels")
int weakLevelTransparent = input.int(defval = 85, minval = 0, maxval = 100, title = "Weak level transparent, %", group = "important levels")

// Common
float maxLevelDistanceCoef = input.float(defval = 0.7, title = "Max distance to level", group = "common")
bool showLevelTime = input.bool(defval = true, title = "Show level time", group = "common")
 
// Price
string priceShowOptions = input.string(defval = size.normal, options = [size.huge, size.large, size.normal, size.small, size.tiny, "none"], title = "Size", group = "price")
color defaultPriceColor = input.color(defval = color.white, title = "Color", group = "price")
color roundPriceColor = input.color(defval = color.lime, title = "Round price color", group = "price")

// Indicators
bool showAvgDollarVolume = input.bool(defval = true, title = "Daly dollar volume",  inline = "dollar threshoold", group = "indicators")
float dollarVolumeThreshold = input.int(defval = 100, title = "", inline = "dollar threshoold", group = "indicators", tooltip = "Threshold millions") * 1000000
bool showCorrelation = input.bool(defval = true, title = "Bitcoin correlation", inline = "correlation", group = "indicators")
float correlationThreshold = input.float(defval = 0.5, title = "", inline = "correlation", tooltip = "Threshold value", group = "indicators")
bool showNatr = input.bool(defval = true, title = "Natr",  group = "indicators")
bool showPriceChange = input.bool(defval = true, title = "Price change",  group = "indicators")
bool showDayAtrDistance = input.bool(defval = true, title = "Percentage of average daily ATR",  group = "indicators")
bool showAvgVolume5min = input.bool(defval = true, title = "Average volume 5 min",  group = "indicators")

// Visual
bool showLogo = input.bool(defval = true, title = "Show logo", group = "visual")
//#endregion

//#region CONSTANTS ============================================
string SIDE_HIGH = "SIDE_HIGH"
string SIDE_LOW = "SIDE_LOW"
int LOCAL_PERIOD = 0
int MIDDLE_PERIOD = 1
int GLOBAL_PERIOD = 2
int BREAK_PERIOD = 3
//#endregion

//#region GLOBAL VARIABLES ============================================
int secondsInCurrentPeriod = timeframe.in_seconds(timeframe.period)
int localLevelLifetimeBars = math.floor(localLevelLifetimeSeconds / secondsInCurrentPeriod)
int middleLevelLifetimeBars = math.floor(middleLevelLifetimeSeconds / secondsInCurrentPeriod)
int globalLevelLifetimeBars = math.floor(globalLevelLifetimeSeconds / secondsInCurrentPeriod)
int breakLevelLifetimeBars = math.floor(breakLevelLifetimeSeconds / secondsInCurrentPeriod)
float priceRangeAtr = request.security(syminfo.ticker, "60", ta.atr(24))
float priceRange = priceRangeAtr * (math.sqrt(secondsInCurrentPeriod / 10) * maxLevelDistanceCoef)
float nearLevelValue = na(priceRangeAtr) ? syminfo.mintick: priceRangeAtr * nearLevelCoef
var HLevel.levelsClass levels = HLevel.levelsClass.new()
var HLevel.levelDrawerClass drawer = HLevel.levelDrawerClass.new()
var bool isInit = false
color tableBgColor = #363636
color successColor = color.green
color faildColor = color.red
color tableTextColor = color.white

// price distance labels
var label highLevelPriceLabel = label.new(bar_index, high, style = label.style_label_left, textcolor = color.white)
var label lowLevelPriceLabel = label.new(bar_index, low, style = label.style_label_left, textcolor = color.white)
//#endregion

//#region FUNCTIONS ============================================
updatePriceDistanceLabel(label lbl, HLevel.level lvl, float labelOffset, color clr, color defaultClr) => 
    float distance = -1
    if not na(lvl)
        distance := math.abs(lvl.price - close) / close

    string formatted = "-----"
    if distance >= 0 and distance < 1
        formatted := str.format("{0,number,#.##}%", distance * 100)

    lbl.set_x(bar_index + 10)
    lbl.set_y(close + labelOffset * (math.sqrt(secondsInCurrentPeriod / 10)) / 15)
    lbl.set_text(formatted)
    lbl.set_color(distance < 0 ? defaultClr : clr)

bigNumberFormater(value) =>
    string _value = str.tostring(math.round(value))
    int length = str.length(_value) 
    if length > 11
        str.substring(_value, 0, 3) + " B"
    else if length > 10
        str.substring(_value, 0, 2) + " B"
    else if length > 9
        str.substring(_value, 0, 1) + " B"
    else if length > 8
        str.substring(_value, 0, 3) + " M"
    else if length > 7
        str.substring(_value, 0, 2) + " M"
    else if length > 6
        str.substring(_value, 0, 1) + " M"
    else if length > 5
        str.substring(_value, 0, 3) + " K"
    else if length > 4
        str.substring(_value, 0, 2) + " K"
    else if length > 3
        str.substring(_value, 0, 1) + " K"
    else 
        _value

getAvgVolume(int bars) =>
    float avgVolume = 0
    for i = 1 to bars by 1
        avgVolume += volume[i]
    avgVolume / bars

getDollarAvgVolume(int bars) =>
    float avgDollarVolume = 0
    for i = 1 to bars by 1
        avgDollarVolume += volume[i] * close[i]
    avgDollarVolume
//#endregion

//#region INDICATORS =================================================================
float natr = request.security(syminfo.ticker, "5", ta.ema(ta.tr(true), 14) / close)
float correlation = ta.correlation(request.security("BINANCE:BTCUSDT.P", "5", close), request.security(syminfo.ticker, "5", close), 20)
float priceChange = (request.security(syminfo.ticker, "D", close) - request.security(syminfo.ticker, "D", open)) / close

float customAtr = request.security(syminfo.ticker, "D", ta.atr(7))
float dayAtr1D = request.security(syminfo.ticker, "D", ta.atr(1))
float avgDayAtr = na(customAtr) ? dayAtr1D : customAtr

float avgVolume5min = request.security(syminfo.ticker, "5", getAvgVolume(288))
float avgDollarVolume = request.security(syminfo.ticker, "5", getDollarAvgVolume(288))
//#endregion =========================================================================

//#region INITIALIZATION =================================================================
if not isInit
    levels.init(minNearLevels = minNearLevels)
    levels.addLifetime(LOCAL_PERIOD, localLevelLifetimeBars)
    levels.addLifetime(MIDDLE_PERIOD, middleLevelLifetimeBars)
    levels.addLifetime(GLOBAL_PERIOD, globalLevelLifetimeBars)
    levels.addLifetime(BREAK_PERIOD, breakLevelLifetimeBars)

    drawer.init(priceShowOptions = priceShowOptions, transparent = weakLevelTransparent, defaultPriceColor = defaultPriceColor, roundPriceColor = roundPriceColor)
    drawer.showLevelTime := showLevelTime
    drawer.addStyle(HLevel.lineStyle.new(localLevelWidth, localLevelColor))
    drawer.addStyle(HLevel.lineStyle.new(middleLevelWidth, middleLevelColor))
    drawer.addStyle(HLevel.lineStyle.new(globalLevelWidth, globalLevelColor))
    drawer.addStyle(HLevel.lineStyle.new(breakLevelWidth, breakLevelColor))
    isInit := true
//#endregion

//#region MAIN LOOP =================================================================
HLevel.pivotsList pivots = HLevel.pivotsList.new()
pivots.init(secondsInCurrentPeriod)
pivots.add(LOCAL_PERIOD, localLevelPeriodLegSeconds)
pivots.add(MIDDLE_PERIOD, middleLevelPeriodLegSeconds)
pivots.add(GLOBAL_PERIOD, globalLevelPeriodLegSeconds)

levels.update(pivots, priceRange, nearLevelValue)
// draw price distancies
[highLevel, lowLevel] = levels.getNearStrongLevels()
updatePriceDistanceLabel(highLevelPriceLabel, highLevel, priceRangeAtr, color.green, color.new(color.gray, 60))
updatePriceDistanceLabel(lowLevelPriceLabel, lowLevel, -priceRangeAtr, color.red, color.new(color.gray, 60))

drawer.draw(levels)
//#endregion

//#region DISLPLAY LOGO ============================================
var table logoPanel = table.new(
  position = position.bottom_left,
  columns = 1,
  rows = 5)

if showLogo and barstate.islast
    table.cell(table_id = logoPanel, column = 0, row = 0, text = "TOP CRYPTO SCREENER: https://t.me/LazyScalp", bgcolor = color.rgb(152, 154, 161), text_color = color.black)
    table.cell(table_id = logoPanel, column = 0, row = 3, text = " ")
//#endregion

//#region DISLPLAY INDICATORS ============================================
var table indicatorPanel = table.new(
  position = position.top_right,
  columns = 2,
  rows = 10)

if barstate.islast
    if showAvgDollarVolume
        color avgDollarColor = avgDollarVolume > dollarVolumeThreshold ? successColor : tableBgColor
        table.cell(table_id = indicatorPanel, column = 0, row = 0, text = "📶", bgcolor = avgDollarColor, text_color = tableTextColor, tooltip = "Average dollar volume")
        table.cell(table_id = indicatorPanel, column = 1, row = 0, text = bigNumberFormater(avgDollarVolume), bgcolor = avgDollarColor, text_color = tableTextColor, tooltip = "Average dollar volume")
    if showCorrelation
        color correlationColor = correlation < correlationThreshold ? successColor : tableBgColor 
        table.cell(table_id = indicatorPanel, column = 0, row = 1, text = "🔀", bgcolor = correlationColor, text_color = tableTextColor, tooltip = "BTC correlation")
        table.cell(table_id = indicatorPanel, column = 1, row = 1, text = str.format("{0,number,#.##}", correlation), bgcolor = correlationColor, text_color = tableTextColor, tooltip = "BTC correlation")
    if showNatr
        table.cell(table_id = indicatorPanel, column = 0, row = 2, text = "⚡", bgcolor = tableBgColor, text_color = tableTextColor, tooltip = "NATR (5min)")
        table.cell(table_id = indicatorPanel, column = 1, row = 2, text = str.format("{0,number,#.##}%", natr * 100), bgcolor = tableBgColor, text_color = tableTextColor, tooltip = "NATR (5min)")
    if showPriceChange
        color priceColor = priceChange > 0 ? successColor : priceChange < 0 ? faildColor : tableBgColor
        table.cell(table_id = indicatorPanel, column = 0, row = 3, text = "📐", bgcolor = priceColor, text_color = tableTextColor, tooltip = "Сhange prices for the last session")
        table.cell(table_id = indicatorPanel, column = 1, row = 3, text = str.format("{0,number,#.##}%", priceChange * 100), bgcolor = priceColor, text_color = tableTextColor, tooltip = "Сhange prices for the last session")
    if showDayAtrDistance
        float percentageDayAtr = dayAtr1D * 100 / avgDayAtr
        color dayAtrColor = percentageDayAtr >= 100 ? successColor : tableBgColor
        table.cell(table_id = indicatorPanel, column = 0, row = 4, text = "📏", bgcolor = dayAtrColor, text_color = tableTextColor, tooltip = "Percentage of average daily ATR")
        table.cell(table_id = indicatorPanel, column = 1, row = 4, text = str.format("{0,number,##}%", percentageDayAtr), bgcolor = dayAtrColor, text_color = tableTextColor, tooltip = "Percentage of average daily ATR")
    if showAvgVolume5min
        table.cell(table_id = indicatorPanel, column = 0, row = 5, text = "📊", bgcolor = tableBgColor, text_color = tableTextColor, tooltip = "Average volume 5 min")
        table.cell(table_id = indicatorPanel, column = 1, row = 5, text = bigNumberFormater(avgVolume5min), bgcolor = tableBgColor, text_color = tableTextColor, tooltip = "Average volume 5 min")
//#endregion`