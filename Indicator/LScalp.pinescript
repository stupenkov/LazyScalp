// Author: Anton Stupenkov
// Email: stupean@gmail.com
// Screener: https://t.me/LazyScalp

//@version=5
indicator("Scalping level [PRO] v2.3.4", overlay = true, max_lines_count = 50)
import stupean/Serializer/2 as serializer

//#region INPUT ===========================================================
// H1
int h1Width = input.int(defval =  1, title =  "Width", minval =  1, maxval =  10, step =  1, inline="h1Style", group = "H1")
color h1Color = input.color(defval = #3179f5, title =  "Color line H1",  inline="h1Style", group = "H1")
int localLevelPeriodSeconds = input.int(defval = 60, title =  "Local level period, min", group = "H1") * 60

// D1
int d1Width = input.int(defval =  1, title =  "Width", minval =  1, maxval =  10, step =  1, inline="d1Style", group = "D1")
color d1Color = input.color(defval = color.lime, title =  "Color line D1",  inline="d1Style", group = "D1")
int globalLevelPeriodSeconds = input.int(defval =  240, title =  "Global level period, min", group = "D1") * 60

int timeToRemoveLine = input.int(defval =  60, title =  "Time to remove line, min", minval =  1, step =  1, group = "common") * 60
float nearLevelCoef = input.float(defval =  0.1, title =  "Near level coefficient", step =  1, group = "common")
float maxLevelDistanceCoef = input.float(defval =  5, title =  "Max level distance coefficient", step =  0.01, group = "common")
int dayVolumeLimit = input.int(defval =  100, title =  "Day volume limit, million", step =  1, group = "common") * 1000000
color brakeLevelColor = input.color(defval = color.gray, title = "Brake level color", group = "common")

float firstDistanceLevelCoef = input.float(defval = 0.7, title = "Distance first level coefficient")
float secondDistanceLevelCoef = input.float(defval = 3.0, title = "Distance first level coefficient")

// corelation
corrTicker = input.symbol("BINANCE:BTCUSDT.P", "Correlation symbol", group = "correlation")
corrPeriod = input.int(title = "Correlation period", defval = 20, step = 1, group = "correlation")

// natr
natrLength = input.int(title="NATR length", defval = 14, group = "NATR")
thresholdNatr = input.float(title = "NATR threshold", defval = 1, step = 0.1, group = "NATR")

// show info
bool showAdditionalInfo = input.bool(defval = false, title = "Show additional info", group = "visual")
bool showLegends = input.bool(defval = true, title = "Show legends", group = "visual")
bool showDebugInfo = input.bool(defval = false, title = "Show debug info", group = "visual", tooltip = "Development only")
bool showColorCode = input.bool(defval = false, title = "Show color code", group = "visual", tooltip = "Development only")
//#endregion ===========================================================

//#region NATR =================================================================
float natr = request.security(syminfo.ticker, "5", ta.ema(ta.tr(true), natrLength) / close)
string natrFormated = str.tostring(math.round(natr * 100, 2)) + "%"

float natr24H = request.security(syminfo.ticker, "60", ta.ema(ta.tr(true), 24) / close)

//#endregion =========================================================================

var lineTransparent = 80
var c_highLevel = 'highLevel'
var c_lowLevel = 'lowLevel'

type levelLine
    string kind
    int barIndex
    int crossBarIndex = -1
    float price
    line lineId
    string timeFrame
    bool hasNearLevel
    bool hide
    label priceLableId

var array<levelLine> levelLines = array.new<levelLine>()

int seconds = timeframe.in_seconds(timeframe.period)
int historyBars = math.floor(timeToRemoveLine / seconds)

int h1PivotBars = math.floor(localLevelPeriodSeconds * 1.5 / seconds)
int globalPivotBars = math.floor(globalLevelPeriodSeconds * 1.5 / seconds)
int d1PivotBars = math.floor(3600 * 24 * 1.5 / seconds)

float h1HPivot = ta.pivothigh(high, h1PivotBars, h1PivotBars)
float d1HPivot = ta.pivothigh(high, globalPivotBars, globalPivotBars)
float h1LPivot = ta.pivotlow(low, h1PivotBars, h1PivotBars)
float d1LPivot = ta.pivotlow(low, globalPivotBars, globalPivotBars)

// Calculate distancies 
float priceRangeAtr = request.security(syminfo.ticker, "60", ta.atr(24))
float maxDistance = priceRangeAtr * maxLevelDistanceCoef
float distanceBetweenNearLevels = priceRangeAtr * nearLevelCoef
float firstDistanceToLevel = priceRangeAtr * firstDistanceLevelCoef
float secondDistanceToLevel = priceRangeAtr * secondDistanceLevelCoef

float closeHighPrice = -1
string closeTfHigh = na
float closeLowPrice = -1
string closeTfLow = na
var color middleTableColor = #ff9800
var color successTableColor = #3c963f
var tableBgColor = #363636
var color roundPriceColor = color.lime
var color defaultPriceColor = color.white


//#region CLASSES =======================================================

//#region dataBuilder =======================================================
type dataBuilder
    array<string> keyValue

method add(dataBuilder this, string name, value) =>
    if na(this.keyValue)
        this.keyValue := array.new<string>()
    this.keyValue.push(name + "=" + str.tostring(value))
    this

method build(dataBuilder this) =>
    string result = ""
    for int i = 0 to this.keyValue.size() - 1
        result += this.keyValue.get(i)
        if i != this.keyValue.size() - 1
            result += ";"
    result

//#endregion =========================================================================

//#endregion =========================================================================


//#region Calculate day volume =======================================================
formater(data) =>
    if str.length(data) > 11
        str.substring(data, 0, 3) + " B"
    else if str.length(data) > 10
        str.substring(data, 0, 2) + " B"
    else if str.length(data) > 9
        str.substring(data, 0, 1) + " B"
    else if str.length(data) > 8
        str.substring(data, 0, 3) + " M"
    else if str.length(data) > 7
        str.substring(data, 0, 2) + " M"
    else if str.length(data) > 6
        str.substring(data, 0, 1) + " M"
    else if str.length(data) > 5
        str.substring(data, 0, 3) + " K"
    else if str.length(data) > 4
        str.substring(data, 0, 2) + " K"
    else if str.length(data) > 3
        str.substring(data, 0, 1) + " K"

getDayVolume()=>
    d1 = request.security(syminfo.ticker, "60", volume * close)
    d2 = request.security(syminfo.ticker, "60", volume[1] * close[1])
    d3 = request.security(syminfo.ticker, "60", volume[2] * close[2])
    d4 = request.security(syminfo.ticker, "60", volume[3] * close[3])
    d5 = request.security(syminfo.ticker, "60", volume[4] * close[4])
    d6 = request.security(syminfo.ticker, "60", volume[5] * close[5])
    d7 = request.security(syminfo.ticker, "60", volume[6] * close[6])
    d8 = request.security(syminfo.ticker, "60", volume[7] * close[7])
    d9 = request.security(syminfo.ticker, "60", volume[8] * close[8])
    d10 = request.security(syminfo.ticker, "60", volume[9] * close[9])
    d11 = request.security(syminfo.ticker, "60", volume[10] * close[10])
    d12 = request.security(syminfo.ticker, "60", volume[11] * close[11])
    d13 = request.security(syminfo.ticker, "60", volume[12] * close[12])
    d14 = request.security(syminfo.ticker, "60", volume[13] * close[13])
    d15 = request.security(syminfo.ticker, "60", volume[14] * close[14])
    d16 = request.security(syminfo.ticker, "60", volume[15] * close[15])
    d17 = request.security(syminfo.ticker, "60", volume[16] * close[16])
    d18 = request.security(syminfo.ticker, "60", volume[17] * close[17])
    d19 = request.security(syminfo.ticker, "60", volume[18] * close[18])
    d20 = request.security(syminfo.ticker, "60", volume[19] * close[19])
    d21 = request.security(syminfo.ticker, "60", volume[20] * close[20])
    d22 = request.security(syminfo.ticker, "60", volume[21] * close[21])
    d23 = request.security(syminfo.ticker, "60", volume[22] * close[22])
    d24 = request.security(syminfo.ticker, "60", volume[23] * close[23])
    math.round(d1 + d2 + d3 + d4 + d5 + d6 + d7 + d8 + d9 + d10 + d11 + d12 + d13 + d14 + d15 + d16 + d17 + d18 + d19 + d20 + d21 + d22 + d23 + d24)

float dayVolNumber = getDayVolume()
dayVol = formater(str.tostring(dayVolNumber))
//#endregion =========================================================================

//#region Corelation =================================================================
float corrTickerData = request.security(corrTicker, "5", close)
float currTickerData = request.security(syminfo.ticker, "5", close)
float corr = math.round(ta.correlation(corrTickerData, currTickerData, corrPeriod), 2)
//#endregion =========================================================================

//#region LEVELS =================================================================

// Create level
if not na(h1HPivot)
    levelLine level = levelLine.new(
      kind = c_highLevel,
      barIndex =  bar_index - h1PivotBars,
      price = h1HPivot,
      timeFrame = "60")
    array.unshift(levelLines, level)

if not na(h1LPivot)
    levelLine level = levelLine.new(
      kind = c_lowLevel,
      barIndex =  bar_index - h1PivotBars,
      price = h1LPivot,
      timeFrame = "60")
    array.unshift(levelLines, level)

//====================================================================================
// Mark day level
//====================================================================================
if not na(d1HPivot) and array.size(levelLines) > 0
    for i = 0 to array.size(levelLines) - 1
        levelLine level = array.get(levelLines, i)
        if level.kind == c_highLevel and level.price == d1HPivot
            level.timeFrame := 'D'

if not na(d1LPivot) and array.size(levelLines) > 0
    for i = 0 to array.size(levelLines) - 1
        levelLine level = array.get(levelLines, i)
        if level.kind == c_lowLevel and level.price == d1LPivot
            level.timeFrame := 'D'

//====================================================================================
// Mark nearly levels
//====================================================================================
int levelLinesSize = array.size(levelLines)
if levelLinesSize > 1
    for j = 0 to levelLinesSize - 1
        levelLine firstLevel = array.get(levelLines, j)
        int counter = 0
        while levelLinesSize > counter
            if counter != j
                levelLine secondLevel = array.get(levelLines, counter)

                if math.abs(firstLevel.price - secondLevel.price) <= distanceBetweenNearLevels
                    firstLevel.hasNearLevel := true
                    counter := levelLinesSize
                else
                    firstLevel.hasNearLevel := false

            counter += 1


//====================================================================================
// Process lines
//====================================================================================
int counter = 0
while array.size(levelLines) > counter
    levelLine level = array.get(levelLines, counter)

    // mark crossover
    bool isCross = level.kind == c_highLevel ? level.price < high : level.price > low
    if isCross and level.crossBarIndex == -1
        level.crossBarIndex := bar_index

    // delete old level
    if (level.crossBarIndex > -1 and level.crossBarIndex < bar_index - historyBars)
      or (level.timeFrame == '60' and level.barIndex < bar_index - d1PivotBars - 1)
        if not na(level.lineId)
            line.delete(level.lineId)
        if not na(level.priceLableId )
            label.delete(level.priceLableId)
        array.remove(levelLines, counter)
        continue

    // distance to close levels
    if level.crossBarIndex == -1 and level.hasNearLevel and level.kind == c_highLevel and (closeHighPrice == -1 or level.price < closeHighPrice)
        closeTfHigh := level.timeFrame
        closeHighPrice := level.price
    if level.crossBarIndex == -1 and level.hasNearLevel and level.kind == c_lowLevel and (closeLowPrice == -1 or level.price > closeLowPrice )
        closeTfLow := level.timeFrame
        closeLowPrice := level.price

    // skip old level
    if (level.barIndex < bar_index - 4500)
        counter +=1
        continue

      // remove far line
    if math.abs(level.price - close) > maxDistance
        if not na (level.lineId)
            line.delete(level.lineId)
        if not na(level.priceLableId )
            label.delete(level.priceLableId)
        counter +=1
        continue

    // update line
    color color = if level.crossBarIndex != -1
        brakeLevelColor
    else if level.timeFrame == "60"
        h1Color
    else if level.timeFrame == "D"
        d1Color

    int transp = if level.crossBarIndex != -1
        80
    else if level.hasNearLevel
        0
    else
        lineTransparent

    int width = switch level.timeFrame
        "60" => h1Width
        "D" => d1Width

    if na(level.lineId)
        level.lineId := line.new(
          x1 = level.barIndex,
          y1 = level.price,
          x2 = level.barIndex + 1,
          y2 = level.price,
          extend = extend.right,
          color = color.new(color, transp),
          style = line.style_solid,
          width = width)
    else
        line.set_color(level.lineId, color.new(color, transp))
        line.set_width(level.lineId, width)

    // manage price label
    if not na(level.lineId) and level.hasNearLevel and na(level.priceLableId) and level.crossBarIndex == -1
        level.priceLableId := label.new(
          x = level.barIndex,
          y = 0,
          text = str.tostring(level.price),
          style = label.style_none,
          textcolor = math.round_to_mintick(level.price / 100) * 100 == level.price ? roundPriceColor : defaultPriceColor,
          yloc = level.kind == c_highLevel ? yloc.abovebar : yloc.belowbar) //yloc.price)
    if not na(level.priceLableId) and (na(level.lineId) or level.crossBarIndex != -1 or not level.hasNearLevel)
        label.delete(level.priceLableId)

    counter += 1
//#endregion =================================================================

//====================================================================================
// TABLES
//====================================================================================

//#region Information panel =========================================================
var table panel = table.new(
  position = position.top_right,
  columns = 4,
  rows = 30,
  bgcolor = tableBgColor
  )

var color textColor = color.white
color bgColorH = na
color bgColorL = na
if barstate.islast
    color dayVolumeColor = dayVolNumber > dayVolumeLimit ? color.rgb(60, 150, 63) : color.rgb(173, 47, 47)
    table.cell(table_id = panel, column = 0, row = 1, text = "📶", text_color = textColor, bgcolor = dayVolumeColor)
    table.cell(table_id = panel, column = 1, row = 1, text = "Day volume", text_color = textColor, bgcolor = dayVolumeColor)
    table.cell(table_id = panel, column = 2, row = 1, text = dayVol, text_color = textColor, bgcolor = dayVolumeColor)
    table.cell(table_id = panel, column = 3, row = 1, text = "          ", bgcolor = dayVolumeColor)

    float closeHighPercent =math.round(math.abs(closeHighPrice - close) * 100 / close, 2)
    string closeHighText = closeHighPercent < 0 or closeHighPercent > 100 ? "-" : str.tostring(closeHighPercent) + "%"
    bgColorH := if closeHighPrice < 0
        na 
    else if closeHighPrice < close + firstDistanceToLevel
        successTableColor
    else if closeHighPrice < close + secondDistanceToLevel
        middleTableColor
    table.cell(table_id = panel, column = 0, row = 2, text = "🔼", text_color = textColor, bgcolor = bgColorH)
    table.cell(table_id = panel, column = 1, row = 2, text = "Strong high", text_color = textColor, bgcolor = bgColorH, width = 7)
    table.cell(table_id = panel, column = 2, row = 2, text = closeHighText, text_color = textColor, bgcolor = bgColorH, width = 4)
    table.cell(table_id = panel, column = 3, row = 2, bgcolor = bgColorH)

    float closeLowPercent = math.round(math.abs(closeLowPrice - close) * 100 / close, 2)
    string closeLowText = closeLowPercent < 0 or closeLowPercent > 100 ? "-" : str.tostring(closeLowPercent) + "%"
    bgColorL := if closeLowPrice < 0
        na
    else if closeLowPrice > close - firstDistanceToLevel
        successTableColor
    else if closeLowPrice > close - secondDistanceToLevel
        middleTableColor
    table.cell(table_id = panel, column = 0, row = 3, text = "🔽", text_color = textColor, bgcolor = bgColorL)
    table.cell(table_id = panel, column = 1, row = 3, text = "Strong low", text_color = textColor, bgcolor = bgColorL)
    table.cell(table_id = panel, column = 2, row = 3, text = closeLowText, text_color = textColor, bgcolor = bgColorL)
    table.cell(table_id = panel, column = 3, row = 3, bgcolor = bgColorL)

    table.cell(table_id = panel, column = 0, row = 4, text = "🔀")
    table.cell(table_id = panel, column = 1, row = 4, text = "BTC correlation", text_color = textColor)
    table.cell(table_id = panel, column = 2, row = 4, text = str.tostring(corr), text_color = textColor)

    color backColorNatr = natr >= thresholdNatr ? successTableColor : na
    table.cell(table_id = panel, column = 0, row = 5, text = "⚡", bgcolor = backColorNatr, text_color = textColor)
    table.cell(table_id = panel, column = 1, row = 5, text = "NATR (5 min)", bgcolor = backColorNatr, text_color = textColor)
    table.cell(table_id = panel, column = 2, row = 5, text = natrFormated, bgcolor = backColorNatr, text_color = textColor)
    table.cell(table_id = panel, column = 3, row = 5, text = "", bgcolor = backColorNatr, text_color = textColor)


    if showAdditionalInfo
        table.cell(table_id = panel, column = 1, row = 10, text = "Avgerage hour ATR", text_color = textColor)
        table.cell(table_id = panel, column = 2, row = 10, text = str.tostring(math.round(priceRangeAtr * 100 / close, 2)) + "%", text_color = textColor)

        table.cell(table_id = panel, column = 1, row = 11, text = "Max distance near level", text_color = textColor)
        table.cell(table_id = panel, column = 2, row = 11, text = str.tostring(math.round(distanceBetweenNearLevels * 100 / close, 2)) + "%", text_color = textColor)

        table.cell(table_id = panel, column = 1, row = 12, text = "Max distance to levels", text_color = textColor)
        table.cell(table_id = panel, column = 2, row = 12, text = str.tostring(math.round(maxDistance * 100 / close, 2)) + "%", text_color = textColor)

        table.cell(table_id = panel, column = 1, row = 13, text = "Max distance to 1 level ", text_color = textColor)
        table.cell(table_id = panel, column = 2, row = 13, text = str.format("{0,number,#.##}%", firstDistanceToLevel * 100 / close), text_color = textColor)

        table.cell(table_id = panel, column = 1, row = 14, text = "Max distance to 2 level", text_color = textColor)
        table.cell(table_id = panel, column = 2, row = 14, text = str.format("{0,number,#.##}%", secondDistanceToLevel * 100 / close), text_color = textColor)

    if showDebugInfo
        table.cell(table_id = panel, column = 0, row = 18, text = "1", bgcolor = color.rgb(0,0,0))
        table.cell(table_id = panel, column = 1, row = 18, text = str.tostring(1), bgcolor = color.aqua)

        table.cell(table_id = panel, column = 0, row = 19, text = "2", bgcolor = color.aqua)
        table.cell(table_id = panel, column = 1, row = 19, text = str.tostring(2), bgcolor = color.aqua)
//#endregion =========================================================

//#region Description panel ==========================================================

var table descPanel = table.new(
  position = position.middle_right,
  columns = 2,
  rows = 10)

if barstate.islast and showLegends
    table.cell(table_id = descPanel, column = 0, row = 0, text = "Legends", text_color = textColor, text_halign = text.align_center)
    table.cell(table_id = descPanel, column = 1, row = 0, bgcolor = tableBgColor)
    table.merge_cells(table_id = descPanel, start_column = 0, start_row = 0, end_column = 1, end_row = 0)

    table.cell(table_id = descPanel, column = 0, row = 1, text = "Strong local level", text_halign = text.align_right, text_color = textColor)
    table.cell(table_id = descPanel, column = 1, row = 1, bgcolor = h1Color)

    table.cell(table_id = descPanel, column = 0, row = 2, text = "Local extremum", text_halign = text.align_right, text_color = textColor)
    table.cell(table_id = descPanel, column = 1, row = 2, bgcolor = color.new(h1Color, lineTransparent))

    table.cell(table_id = descPanel, column = 0, row = 3, text = "Strong global level", text_halign = text.align_right, text_color = textColor)
    table.cell(table_id = descPanel, column = 1, row = 3, bgcolor = d1Color)

    table.cell(table_id = descPanel, column = 0, row = 4, text = "Global extremum", text_halign = text.align_right, text_color = textColor)
    table.cell(table_id = descPanel, column = 1, row = 4, bgcolor = color.new(d1Color, lineTransparent))

    table.cell(table_id = descPanel, column = 0, row = 5, text = "Brake level", text_halign = text.align_right, text_color = textColor)
    table.cell(table_id = descPanel, column = 1, row = 5, bgcolor = color.new(brakeLevelColor, lineTransparent))

    table.cell(table_id = descPanel, column = 0, row = 6, text = "Price on chart", text_halign = text.align_right, text_color = textColor)
    table.cell(table_id = descPanel, column = 1, row = 6, bgcolor = defaultPriceColor)

    table.cell(table_id = descPanel, column = 0, row = 7, text = "Round price on chart", text_halign = text.align_right, text_color = textColor)
    table.cell(table_id = descPanel, column = 1, row = 7, bgcolor = roundPriceColor)
//#endregion Description panel ==========================================================

//#region Color table data ==========================================================
var int tableColorDataSide = 10
var int maxDataBytes = tableColorDataSide * tableColorDataSide * 3
var table dataByteTable = table.new(
  position = position.bottom_right,
  columns = tableColorDataSide + 1,
  rows = tableColorDataSide + 1,
  bgcolor = color.rgb(0,0,0),
  frame_color = color.white,
  frame_width = 1)

string data = dataBuilder.new()
  .add("lLevel", closeLowPrice)
  .add("hLevel", closeHighPrice)
  .add("natr", natr)
  .add("corr", corr)
  .build()
array<color> dataInColors = serializer.serializeToColors(data)

if showColorCode and barstate.islast
    int dataSize = dataInColors.size()
    for int y = 0 to tableColorDataSide - 1
        for int x = 0 to tableColorDataSide - 1
            int index = x + y * tableColorDataSide
            color bgColor = index < dataSize ? dataInColors.get(index) : color.rgb(0, 0, 0)
            table.cell(
              table_id = dataByteTable,
              column = x,
              row = y,
              text_size = size.tiny,
              bgcolor = bgColor)
   
//#endregion
